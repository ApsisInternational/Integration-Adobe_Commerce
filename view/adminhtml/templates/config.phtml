<?php  /** @var \Apsis\One\Block\Adminhtml\Block $block */ ?>
<script>
    require(['Magento_Ui/js/modal/alert', 'Magento_Ui/js/modal/confirm', 'domReady!'], function (alert, confirmation) {
        'use strict';

        // Elements Ids
        const ID_SECTION = 'apsis_one_mappings_section_mapping_section';
        const ID_ACCOUNT = 'apsis_one_accounts_oauth_id';
        const ELEMENT_LIST = [ID_SECTION, ID_ACCOUNT];
        const BUTTON_REST_ID = 'apsis_reset_button';
        const BUTTON_CONFIG_SAVE = 'save';

        // HTML tags
        const P_TAG_OPEN = '<p>';
        const P_TAG_CLOSE = '</p>';
        const BR = '<br>';

        // Messages
        const MSG_INFO = BR + P_TAG_OPEN + 'Here in <a target="_blank"' +
            ' href="https://help.apsis.com/en/articles/321-about-the-magento-integration">APSIS Knowledge Base</a>'
            + ' is a summary of the process of integrating Magento with your APSIS One account.' + P_TAG_CLOSE;

        const MSG_CONFIRM = '<span style="color:red"> Are you sure? </span>';
        const MSG_SAVE = '<span style="color:red"> Save Config </span>';
        const MSG_DATA = ' and all Profiles & Events will be set to re-sync. ';
        const END = 'This action is irreversible.';
        const MSG_P_RESET = MSG_SAVE + 'will trigger partial reset. All configurations except account will be removed '
        const MSG_F_RESET = MSG_SAVE + 'will trigger full reset. All configurations will be removed '
        const MSG_PRODUCTION = BR + 'Strictly for testing on stage environment only. Not recommended on Production' +
            ' environment.';
        const MSG_VALUE_CHANGE = 'Changing this configuration will has certain consequences. ';
        const MSG_SECTION_VALUE_CHANGE = P_TAG_OPEN + MSG_VALUE_CHANGE + MSG_P_RESET + MSG_DATA + P_TAG_CLOSE + MSG_INFO;
        const MSG_ACCOUNT_VALUE_CHANGE = P_TAG_OPEN + MSG_VALUE_CHANGE + MSG_F_RESET + MSG_DATA + P_TAG_CLOSE + MSG_INFO;
        const MSG_SECTION_CONFIRMED_SAVE = P_TAG_OPEN + MSG_P_RESET + MSG_DATA + END + MSG_CONFIRM + P_TAG_CLOSE
            + MSG_INFO;
        const MSG_ACCOUNT_CONFIRMED_SAVE = P_TAG_OPEN + MSG_F_RESET + MSG_DATA + END + MSG_CONFIRM + P_TAG_CLOSE
            + MSG_INFO;
        const MSG_DEV_RESET = P_TAG_OPEN + MSG_F_RESET + MSG_DATA + MSG_PRODUCTION + MSG_CONFIRM + P_TAG_CLOSE
            + MSG_INFO;

        var isWarned = false;
        var isConfirmedOk = false;

        /**
         * @param {String} alertContent
         */
        function showWarning(alertContent) {
            alert({
                title: 'Warning!',
                content: alertContent,
                modalClass: 'alert',
                actions: {
                    always: function() {
                        isWarned = true;
                    }
                },
                buttons: [{
                    text: 'Understood',
                    class: 'action primary accept',
                    click: function () {
                        this.closeModal(true);
                    }
                }]
            });
        }

        /**
         * @param {Object} elm
         * @param {String} confirmContext
         * @param {boolean} reload
         */
        function showConfirmation(elm, confirmContext, reload = false) {
            confirmation({
                title: 'Please Confirm',
                content: confirmContext,
                actions: {
                    confirm: function() {
                        isConfirmedOk = true;
                        if (reload) {
                            window.location.href = '<?= $block->getResetUrl() ?>';
                        } else {
                            elm.click();
                        }
                    },
                    cancel: function(){},
                    always: function(){}
                },
                buttons: [{
                    text: 'Cancel',
                    class: 'action-secondary action-dismiss',
                    click: function (event) {
                        this.closeModal(event);
                    }
                }, {
                    text: 'Continue',
                    class: 'action-primary action-accept',
                    click: function (event) {
                        this.closeModal(event, true);
                    }
                }]
            });
        }

        /**
         * @param {Object} element
         *
         * @return boolean
         */
        function isElementExist(element) {
            return typeof (element) != 'undefined' && element != null;
        }

        /**
         * @param {string} isSectionAlreadyMapped
         * @param {string} isAccountAlreadyConfigured
         */
        function init(isSectionAlreadyMapped, isAccountAlreadyConfigured) {
            var btnReset = document.getElementById(BUTTON_REST_ID);
            var btnSave = document.getElementById(BUTTON_CONFIG_SAVE);

            /**
             * Reset button
             */
            if (isElementExist(btnReset)) {
                btnReset.addEventListener('click', function (event) {
                    if (isConfirmedOk === false) {
                        event.preventDefault();
                        event.stopImmediatePropagation();
                        showConfirmation(btnReset, MSG_DEV_RESET, true);
                    }
                });
            }

            /**
             * Save button
             */
            if (isElementExist(btnSave)) {
                btnSave.addEventListener('click', function (event) {
                    var confirmContext = '';

                    // If section element exist on page
                    if (isElementExist(document.getElementById(ID_SECTION)) && isWarned) {
                        confirmContext = MSG_SECTION_CONFIRMED_SAVE;
                    }

                    // If account element exist on page
                    if (isElementExist(document.getElementById(ID_ACCOUNT)) && isWarned) {
                        confirmContext = MSG_ACCOUNT_CONFIRMED_SAVE;
                    }

                    if (isConfirmedOk === false && confirmContext) {
                        event.preventDefault();
                        event.stopImmediatePropagation();
                        showConfirmation(btnSave, confirmContext)
                    }
                });
            }

            /**
             * Value change on Section and Account elements
             */
            ELEMENT_LIST.forEach(function (element) {
                var elm = document.getElementById(element);
                if (isElementExist(elm)) {
                    elm.addEventListener('change', function () {
                        // If section element and section is already mapped
                        if (elm.getAttribute('id') === ID_SECTION && isSectionAlreadyMapped) {
                            showWarning(MSG_SECTION_VALUE_CHANGE);
                        }

                        // If account element and account is already mapped
                        if (elm.getAttribute('id') === ID_ACCOUNT && isAccountAlreadyConfigured) {
                            showWarning(MSG_ACCOUNT_VALUE_CHANGE);
                        }
                    });
                }
            });
        }

        init('<?= $block->isSectionAlreadyMapped() ?>', '<?= $block->isAccountAlreadyConfigured() ?>');
    });
</script>
